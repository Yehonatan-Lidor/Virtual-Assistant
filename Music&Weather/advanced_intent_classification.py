# -*- coding: utf-8 -*-
"""Advanced_Intent_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GZxGySnv0jMeNR4JVEsjpOe7ZJLbeTmK
"""

import pandas as pd  
import numpy as np  
#import seaborn as sns  
#import matplotlib.pyplot as plt  
from pandas.api.types import is_string_dtype, is_numeric_dtype    
df = pd.read_csv("features.csv")

"""
y = df.output
sns.set(rc = {'figure.figsize':(22,8)})

ax = sns.countplot(y,label="Count", )
"""
df.isnull().sum()

df.sum()

df = df.drop(columns=["Unnamed: 0", "query"])

df = df.drop(columns=["countChars"])

df = df.drop(columns=["count stop words"])
"""
plt.figure(figsize=(35,35))
correlation = df.corr()
sns.heatmap(correlation, cmap="GnBu",annot=True)
"""
#df = df.drop(columns=["count stop words"])

df.describe()

df = df.drop(columns=["count am-is-are"])

y = df.output
final_list = []
for i in y:
  if i == "SEARCH":
    final_list.append([1.0,0.0,0.0,0.0,0.0])
  elif i == "GET_MESSAGE":
    final_list.append([0.0,1.0,0.0,0.0,0.0])
  elif i == "SEND_MESSAGE":
    final_list.append([0.0,0.0,1.0,0.0,0.0])
  elif i == "GetWeather":
    final_list.append([0.0,0.0,0.0,1.0,0.0])
  else:
    final_list.append([0.0,0.0,0.0,0.0,1.0])

y = np.array(final_list, dtype="float32")
print(y)
import sklearn
from sklearn.model_selection import train_test_split
df = df.drop(columns=["output"])
x_train, x_test, y_train, y_test = train_test_split(df , y, test_size=0.2)
print(x_train)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.fit_transform(x_test)
print(x_train)
"""
from sklearn import tree
clf = tree.DecisionTreeClassifier()
clf = clf.fit(x_train, y_train)
from sklearn.neighbors import KNeighborsClassifier
neigh = KNeighborsClassifier(n_neighbors=2)
neigh.fit(x_train, y_train)

from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import make_classification
X, y = make_classification(n_samples=1000, n_features=24,n_informative=5, n_redundant=5,random_state=0, shuffle=True)
clfr = RandomForestClassifier(max_depth=5, random_state=0)
clfr.fit(X, y)
"""


import tensorflow as tf

ann = tf.keras.models.Sequential()  
ann.add(tf.keras.layers.Dense(units=22, activation="relu"))
ann.add(tf.keras.layers.Dense(units=22, activation="relu"))
ann.add(tf.keras.layers.Dense(units=22, activation="relu"))
ann.add(tf.keras.layers.Dense(units=22, activation="relu"))
ann.add(tf.keras.layers.Dense(units=22, activation="relu"))
ann.add(tf.keras.layers.Dense(units=22, activation="relu"))
ann.add(tf.keras.layers.Dense(units=5, activation="softmax"))
ann.compile(optimizer="adam" , loss="categorical_crossentropy" , metrics=["accuracy"])
ann.fit(x_train, y_train, batch_size=32, epochs=100)

y_pred = ann.predict(x_test)
print(y_pred)

m1 = tf.keras.metrics.Accuracy()
m1.update_state(y_pred, y_test)

from sklearn.metrics import confusion_matrix, accuracy_score

m = tf.keras.metrics.CategoricalAccuracy()
m.update_state([y_pred], [y_test])
m.result().numpy()

ann.summary()

# Save the entire model as a SavedModel.
ann.save('saved_model/my_model')